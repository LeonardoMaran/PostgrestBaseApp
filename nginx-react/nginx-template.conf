#user  nobody;
worker_processes  1;

# error_log  logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

# pid        logs/nginx.pid;
# daemon off is required for docker
# daemon     off;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request"'
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';
    #
    # access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    server {

        listen 80;

        root /usr/share/nginx/html;

        location ~ ^/app/((?!(static|(.*\..*))).)+$ {
          try_files /app/index.html =404;
        }

        location ~ ^/app_admin/((?!(static|(.*\..*))).)+$ {
          try_files /app_admin/index.html =404;
        }

        location /api/ {
            #remove_in_local_start
            if ($http_referer !~* postgrest_app_host) {
              set $is_not_valid A;
            }

            if ($http_origin !~* postgrest_app_host) {
              set $is_not_valid "${is_not_valid}B";
            }

            if ($is_not_valid = AB) {
              return 401;
            }

            if ($http_x_app_id !~* ^(0dcb6f25c11ba52b95b64ce6d0921044|658737df3dbb3feb2d9a955306b8d9c2)$) {
              return 401;
            }
            #remove_in_local_end

            proxy_pass http://rest_host:3000/;

            # proxy_redirect    off;
            proxy_http_version  1.1;
            proxy_cache_bypass  $http_upgrade;

            proxy_set_header X-Real-IP        $remote_addr;
            proxy_set_header Upgrade          $http_upgrade;
            proxy_set_header Connection      'upgrade';
            proxy_set_header Host             $host;
            proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;

            #if ($cookie_access_token) {
            #  set $auth "Bearer $cookie_access_token";
            #}

            if ($http_authorization) {
              set $auth $http_authorization;
            }

            proxy_set_header Authorization $auth;
        }

        location /node/ {
            #remove_in_local_start
            if ($http_referer !~* postgrest_app_host) {
              set $is_not_valid A;
            }

            if ($http_origin !~* postgrest_app_host) {
              set $is_not_valid "${is_not_valid}B";
            }

            if ($is_not_valid = AB) {
              return 401;
            }
            #remove_in_local_end

            proxy_pass http://node_host/;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header  Host             $host;
            proxy_set_header  Upgrade          $http_upgrade;
            proxy_set_header  Connection       "upgrade";
        }
    }
}
